{"ast":null,"code":"var _jsxFileName = \"/opt/nodejs/bin2dec/src/containers/Home.js\";\nimport React, { Component } from \"react\";\nimport \"./Home.css\";\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      binary: '11110000',\n      decimal: '240'\n    };\n    this.handleBinChange = this.handleBinChange.bind(this);\n    this.handleDecChange = this.handleDecChange.bind(this);\n  }\n\n  handleBinChange(e) {\n    var i;\n    var decimalValue = 0;\n    var j = 0; //Check for ones and zeros, if true, then start adding)\n\n    console.log(\"----------------------------------------\");\n    console.log(\"Binary field length: \" + e.target.value.length);\n\n    for (i = e.target.value.length - 1; i >= 0; i--) {\n      console.log(\"Current value: [\" + i + \"]=\" + e.target.value[i]);\n\n      if (e.target.value[i] === \"1\") {\n        decimalValue += 2 ** j;\n        console.log(\"decimalValue + 2^\" + j + \"=\" + decimalValue);\n        j++;\n      } else if (e.target.value[i] === \"0\") {\n        console.log(\"decimalValue: \" + decimalValue);\n        j++;\n      } else {\n        decimalValue = \"Not a valid binary number!\";\n        break;\n      }\n    }\n\n    this.setState({\n      binary: e.target.value,\n      decimal: decimalValue\n    });\n  }\n\n  handleDecChange(e) {\n    var binaryValue = [];\n    var i = 0;\n    var remainder = parseInt(e.target.value, 10); //Check for ones and zeros, if true, then start adding)\n\n    console.log(\"----------------------------------------\");\n    console.log(\"Decimal value: \" + e.target.value);\n\n    while (remainder > 0) {\n      binaryValue[i] = remainder % 2;\n      remainder = parseInt(remainder / 2);\n      i++;\n      console.log(\"[\" + i + \"]\" + remainder);\n    }\n\n    binaryValue.join(',');\n    this.setState({\n      binary: binaryValue,\n      decimal: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"lander\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Bin2Dec\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"A simple binary to decimal converter using ReactJS\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Enter Binary: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"binary\",\n      value: this.state.binary,\n      onChange: this.handleBinChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Enter Decimal: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"decimal\",\n      value: this.state.decimal,\n      onChange: this.handleDecChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/opt/nodejs/bin2dec/src/containers/Home.js"],"names":["React","Component","Home","constructor","props","state","binary","decimal","handleBinChange","bind","handleDecChange","e","i","decimalValue","j","console","log","target","value","length","setState","binaryValue","remainder","parseInt","join","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      binary: '11110000',\n      decimal: '240'\n    };\n  \n    this.handleBinChange = this.handleBinChange.bind(this);\n    this.handleDecChange = this.handleDecChange.bind(this);\n  }\n\n  handleBinChange(e) {\n    var i;\n    var decimalValue = 0;\n    var j = 0;\n    //Check for ones and zeros, if true, then start adding)\n    console.log(\"----------------------------------------\");\n    console.log(\"Binary field length: \" + e.target.value.length);\n    for(i = e.target.value.length-1; i >= 0; i--) {  \n      console.log(\"Current value: [\" + i + \"]=\" + e.target.value[i]);\n      if(e.target.value[i]===\"1\")\n      {\n\tdecimalValue+=(2)**j;\n\tconsole.log(\"decimalValue + 2^\" + j + \"=\" + decimalValue);\n\tj++;\n      }\n      else if(e.target.value[i]===\"0\"){\n\tconsole.log(\"decimalValue: \" + decimalValue);\n\tj++;\n      }\n      else{\n        decimalValue = \"Not a valid binary number!\"\n        break;\n      }\n    }\n    this.setState({\n      binary: e.target.value,\n      decimal: decimalValue \n    });\n  }\n\n  handleDecChange(e) {\n    var binaryValue = [];\n    var i = 0;\n    var remainder = parseInt(e.target.value, 10);\n    //Check for ones and zeros, if true, then start adding)\n    console.log(\"----------------------------------------\");\n    console.log(\"Decimal value: \" + e.target.value);\n    while(remainder > 0){\n\tbinaryValue[i] = remainder % 2;\n        remainder = parseInt((remainder / 2));\n\ti++;\n\tconsole.log(\"[\" +i+ \"]\" + remainder);\n    }\n    binaryValue.join(',');\n    \n    this.setState({\n      binary: binaryValue,\n      decimal: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n        <div className=\"lander\">\n          <h1>Bin2Dec</h1>\n\t  <p>A simple binary to decimal converter using ReactJS</p>\n          <div>\n\t    Enter Binary: <input type=\"text\" name=\"binary\" value={this.state.binary} onChange={this.handleBinChange} />\n          </div>\n\t  <div>\n\t    Enter Decimal: <input type=\"text\" name=\"decimal\" value={this.state.decimal} onChange={this.handleDecChange} />\n\t  </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}